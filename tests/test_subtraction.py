from locators.calculator_locators import CalculatorLocators
import pytest

'''
    Файл test_subtraction.py содержит тесты для операции сложения на калькуляторе.
    Метод test_subtraction_positive использует параметризацию для выполнения нескольких тестов с различными значениями уменьшаемого и вычитаемого.
    Метод выполняет операцию вычитания на калькуляторе с каждым набором значений и проверяет, что результат совпадает с ожидаемым.
    Метод test_subtraction_with_invalid_input также использует параметризацию для выполнения тестов с неправильными комбинациями входных данных.
    В негативных тестах мы меняем порядок операндов, чтобы убедиться в том, что оба поля обрабатывают некорректный значения.
'''

class TestCalculatorSubtraction():
    @pytest.mark.parametrize("left_operand, right_operand, expected_result", [
        ('5', '2', '3.00'),     # Проверка вычитания положительных целых чисел
        ('-5', '-2', '-3.00'),  # Проверка вычитания отрицательных целых чисел
        ('2', '-5', '7.00'),    # Проверка вычитания положительного числа из отрицательного числа
        ('0', '5', '-5.00'),    # Проверка вычитания числа из нуля
        ('5', '5', '0.00'),     # Проверка вычитания числа из самого себя
        ('9999999999', '9999999999', '0.00'),  # Проверка вычитания очень больших чисел
        ('100000000', '1', '99999999.00'),     # Проверка разности с восьмизначным числом
        ('100000001', '1', '100000000.00'),    # Проверка разности с восьмизначным числом + 1
        ('3.14', '2.86', '0.28'),              # Проверка вычитания чисел с десятичной частью
        ('5.42', '3.26565', '2.15'),  # Проверка вычитания чисел с использованием десятичной дроби и большого количества знаков после запятой
        ('-1.5', '-2.7', '1.20'),     # Проверка вычитания чисел с использованием отрицательных десятичных дробей
        ('5', '0', '5.00'),           # Проверка вычитания чисел, где одно из них равно нулю
        ('000123.46', '0.456', '123.00'),  # Проверка вычитания чисел, где одно из чисел имеет ведущие нули
        ('3e7', '2e6', '28000000.00'),  # Проверка вычитания чисел с использованием чисел в экспоненциальной записи
    ])
    def test_subtraction_positive(self, calculator_page, left_operand, right_operand, expected_result):
        calculator_page.perform_subtraction(left_operand, right_operand)
        calculator_page.verify_result(expected_result)

    @pytest.mark.parametrize("left_operand, right_operand", [
        ('2.5', 'abc'),     # Проверка вычитания числа и неподходящего значения
        ('2.5', '2.7.8'),   # Проверка вычитания чисел с неправильным форматом
        ('1,000', '2.50'),  # Проверка вычитания чисел с неправильным разделителем десятичной части
        ('', ''),           # Проверка вычитания пустых строк
        ('', '1'),          # Проверка вычитания пустой строки и числа
        (' ', ' '),         # Проверка вычитания пробелов
        (' ', '1'),         # Проверка вычитания пробела и числа
        ('10.50$', '5.25'), # Проверка вычитания чисел со специальными символами
    ])
    def test_subtraction_with_invalid_input(self, calculator_page, left_operand, right_operand):
        calculator_page.perform_subtraction(left_operand, right_operand)
        calculator_page.verify_error_message("Please, fill the input fields correctly")

        calculator_page.perform_subtraction(right_operand, left_operand)
        calculator_page.verify_error_message("Please, fill the input fields correctly")